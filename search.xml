<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>字符串的表示</title>
    <url>/uncategorized/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>==C语言本质上是没有String类型的，都是基于字符数据操作。==<br>
C语言中字符串常量的本质表示其实是一个地址。</p>
<h1>一、用数组表示</h1>
<p>数组：==同一类型==多个元素的集合，在内存中分布在地址连续的单元中。</p>
<ul>
<li>可以直接定义char str[10];</li>
<li>也可以在定义的时候初始化：char str[10] = {&quot;keen&quot;}，这样程序执行时会把&quot;keen\0&quot;依次填入；</li>
<li>数组名表示数组第一个元素的地址；</li>
<li>c语言中操作字符串的本质是通过它在内存中存储单位的首地址进行的；</li>
<li>数组名是常量，指针是变量。即可以将数组赋值给指针，但指针不能赋值给数组。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *s；</span></pre></td></tr><tr><td class="code"><pre><span class="line">   char a[];</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#x2F;&#x2F;可以出现</span></pre></td></tr><tr><td class="code"><pre><span class="line">   s&#x3D;a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#x2F;&#x2F; 不存在</span></pre></td></tr><tr><td class="code"><pre><span class="line">   &#x2F;&#x2F; a &#x3D; s；</span></pre></td></tr></table></figure></li>
<li>可以通过间接操作符*取其内容，也可以通过数组的下标形式。</li>
</ul>
<h1>二、用指针表示</h1>
<p>==无论指针的指向是什么类型，指针都是整型，因为它保存的都是地址。==</p>
<h2>1. char *与char a[]</h2>
<p>char *b保存的是一个字符串首地址的指针变量，char a[]是多个连续的存储单元，每个单位里的数据类型都是char。</p>
<h2>2. char *a[] 与char **</h2>
<p>==char <em>a[]==：[]的优先级高于</em>。   char *a[]中a会优先与[]结合，即它首先是一个数组。其存储单元里存放的是指向char类型的指针变量，即为字符串地址（如&quot;China&quot;的地址）。<br>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">char *a [ ] &#x3D; &#123;&quot;China&quot;,&quot;French&quot;,&quot;America&quot;,&quot;German&quot;&#125;;</span></pre></td></tr></table></figure>
==char **a==：char **a为二级指针，保存一级指针的地址，即地址的地址。</p>
]]></content>
  </entry>
  <entry>
    <title>知识图谱</title>
    <url>/uncategorized/%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2>什么是知识图谱？</h2>
<ul>
<li>
<p>在表现形式上，==语义网络==和==知识图谱==相似，但==语义网络==更侧重于描述概念与概念之间的关系，而==知识图谱==则更偏重于描述实体之间的关联。<a id="more"></a></p>
</li>
<li>
<p>知识图谱：知识图谱是由一些相互连接的实体和他们的属性构成的。换句话说，知识图谱是由一条条知识组成，每条知识表示为一个SPO三元组(Subject-Predicate-Object)。==RDP用于表示这种三元关系==</p>
<blockquote>
<p>A knowledge graph consists of a set of interconnected typed entities and their attributes.
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph LR</span></pre></td></tr><tr><td class="code"><pre><span class="line">Subject--&gt;|Predicate|Object</span></pre></td></tr></table></figure></p>
</blockquote>
</li>
<li>
<p>RDF(Resource Description Framework)---资源描述框架：用于描述实体/资源的标准数据模型。</p>
<ol>
<li>International Resource Identifiers(IRIs)</li>
<li>blank nodes</li>
<li>literals(A blank node is a resource without a URI.)</li>
</ol>
<p>==Subject可以是IRI或blank node。Predicate是IRI。Object三种类型都可以。==</p>
</li>
<li>
<p><strong>The Knowledge Graph enhances Google Search in three main ways to start:</strong></p>
<ol>
<li>Find the right thing</li>
<li>Get the best summary</li>
<li>Go deeper and broader</li>
</ol>
</li>
</ul>
<h2>Reference</h2>
<p><a href="https://zhuanlan.zhihu.com/p/31726910">为什么需要知识图谱？什么是知识图谱？——KG的前世今生</a><br>
<a href="https://search.googleblog.com/2012/05/introducing-knowledge-graph-things-not.html">Google: Introducing the Knowledge Graph: things, not strings</a>（12年谷歌提出知识图谱的概念）</p>
<hr>
<h2>语义网络，语义网，链接数据和知识图谱</h2>
<h3>知识库(Knowledge Base)</h3>
<p>知识库中的知识有很多种不同的形式，例如本体知识、关联性知识、规则库、案例知识等。相比于知识库的概念，知识图谱更加侧重关联性知识的构建，如三元组。</p>
<h3>语义网络(Semantic Network)</h3>
<p>(++比较典型的代表-WordNet++)<br>
相比起知识图谱，早期的语义网络更加侧重描述概念以及概念之间的关系，而知识图谱更加强调数据或事物之间的链接。</p>
<table>
<thead>
<tr>
<th style="text-align:center">语义网络</th>
<th style="text-align:center">RDF</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">is-a</td>
<td style="text-align:center">rdf:type</td>
</tr>
</tbody>
</table>
<h3>语义网(Semantic Web)和链接数据(Linked Data)和Web 3.0</h3>
<p>当链接数据指语义网技术时，它更强调“Web”，弱化了“Semantic”的部分。对应到语义网技术栈，它倾向于使用RDF和SPARQL(RDF查询语言)技术，对于Schema层的技术(RDFS或者OWL)则很少使用。</p>
<blockquote>
<p><strong>Semantic</strong>: The meaning of the data is not only explicitly represented and richly expressive, but it also “travels” along with the data itself.<br>
<strong>Web</strong>: Individual pieces of data are linked together into a network of information, just as documents are linked together on the World Wide Web.</p>
</blockquote>
<p>==链接数据应该是最接近知识图谱的一个概念。==</p>
<h3>知识图谱</h3>
<p>知识图谱是由本体(Ontology)作为Schema层，和RDF数据模型兼容的结构化数据集。</p>
<ul>
<li>链接数据和知识图谱最大的区别在于：
<ol>
<li>链接数据更强调不同RDF数据集(知识图谱)的相互链接</li>
<li>知识图谱不一定要链接到外部的知识图谱，更强调有一个本体层来定义实体的类型和实体之间的关系</li>
</ol>
</li>
</ul>
<h2>Reference</h2>
<p><a href="https://zhuanlan.zhihu.com/p/31864048">语义网络，语义网，链接数据和知识图谱</a><br>
<a href="https://www.youtube.com/watch?v=4x_xzT5eF5Q&amp;feature=youtu.be">What is Linked Data?</a><br>
<a href="https://mp.weixin.qq.com/s?__biz=MzU2NjAxNDYwMg==&amp;mid=2247484090&amp;idx=1&amp;sn=cc9886b3a7820b3aa0ffe239566dc5e0&amp;chksm=fcb3a55fcbc42c49404bb4cca85c78980d0ecc60e76b75f825ac24a194116d297761ee0a308b&amp;scene=0#rd">知识图谱相关的名词解释</a><br>
<a href="https://www.cambridgesemantics.com/blog/semantic-university/intro-semantic-web/many-names-semantic-web/">The Many Names of the Semantic Web</a><br>
<a href="https://lod-cloud.net/">The Linked Open Data Cloud</a></p>
<hr>
<h2>知识图谱基础之RDF，RDFS与OWL</h2>
<h3>一、知识图谱的基石：RDF</h3>
<p>==RDF== (Resource Description Framework) is one of the three foundational Semantic Web technologies, the other two being ==SPARQL== and ==OWL==.</p>
<h4>RDF表现形式</h4>
<p>RDF(Resource Description Framework)，即资源描述框架，其本质是一个数据模型。它提供了一个统一的标准，用于描述实体/资源。==RDF形式上表示为SPO三元组，有时候也称为一条语句(statement)，知识图谱中也称其为一条知识。==</p>
<h4>RDF序列化方法</h4>
<p>换句话说，就是我们怎么存储和传输RDF数据。目前，RDF序列化的方式主要有：RDF/XML，N-Triples，Turtle，RDFa(RDF embedded in HTML)，JSON-LD等几种。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example1 N-Triples:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;chineseName&gt; &quot;罗纳尔多·路易斯·纳萨里奥·德·利马&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;career&gt; &quot;足球运动员&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;fullName&gt; &quot;Ronaldo Luís Nazário de Lima&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;birthDate&gt; &quot;1976-09-18&quot;^^date.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;height&gt; &quot;180&quot;^^int.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;weight&gt; &quot;98&quot;^^int.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;nationality&gt; &quot;巴西&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;1&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;hasBirthPlace&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;place&#x2F;10086&gt;.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;place&#x2F;10086&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;address&gt; &quot;里约热内卢&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">&lt;http:&#x2F;&#x2F;www.kg.com&#x2F;place&#x2F;10086&gt; &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;coordinate&gt; &quot;-22.908333, -43.196389&quot;^^string.</span></pre></td></tr></table></figure>
用Turtle表示的时候我们会加上前缀(Prefix)对RDF的IRI进行缩写。(with the caveat that Turtle allows for a single triple to wrap across lines).
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example2 Turtle:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix person: &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix place: &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;place&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix : &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :chineseName &quot;罗纳尔多·路易斯·纳萨里奥·德·利马&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :career &quot;足球运动员&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :fullName &quot;Ronaldo Luís Nazário de Lima&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :birthDate &quot;1976-09-18&quot;^^date.</span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :height &quot;180&quot;^^int. </span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :weight &quot;98&quot;^^int.</span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :nationality &quot;巴西&quot;^^string. </span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :hasBirthPlace place:10086.</span></pre></td></tr><tr><td class="code"><pre><span class="line">place:10086 :address &quot;里约热内卢&quot;^^string.</span></pre></td></tr><tr><td class="code"><pre><span class="line">place:10086 :coordinate &quot;-22.908333, -43.196389&quot;^^string.</span></pre></td></tr></table></figure>
同一个实体拥有多个属性(数据属性)或关系(对象属性)，我们可以只用一个subject来表示，使其更紧凑。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Example3 Turtle:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix person: &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;person&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix place: &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;place&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix : &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">person:1 :chineseName &quot;罗纳尔多·路易斯·纳萨里奥·德·利马&quot;^^string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :career &quot;足球运动员&quot;^^string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :fullName &quot;Ronaldo Luís Nazário de Lima&quot;^^string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :birthDate &quot;1976-09-18&quot;^^date;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :height &quot;180&quot;^^int;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :weight &quot;98&quot;^^int;</span></pre></td></tr><tr><td class="code"><pre><span class="line">         :nationality &quot;巴西&quot;^^string; </span></pre></td></tr><tr><td class="code"><pre><span class="line">         :hasBirthPlace place:10086.</span></pre></td></tr><tr><td class="code"><pre><span class="line">place:10086 :address &quot;里约热内卢&quot;^^string;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            :coordinate &quot;-22.908333, -43.196389&quot;^^string.</span></pre></td></tr></table></figure>
==What we mean by an RDF Vocabulary is essentially the set of URIs for the edges that make up RDF graphs.==
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;一些声明开头</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix owl: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2002&#x2F;07&#x2F;owl#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix xsd: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix rdfs: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;01&#x2F;rdf-schema#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix rdf: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix foaf: &lt;http:&#x2F;&#x2F;xmlns.com&#x2F;foaf&#x2F;0.1&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix dc: &lt;http:&#x2F;&#x2F;purl.org&#x2F;dc&#x2F;elements&#x2F;1.1&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix dbp: &lt;http:&#x2F;&#x2F;dbpedia.org&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix dbpr: &lt;http:&#x2F;&#x2F;dbpedia.org&#x2F;resource&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix dbpp: &lt;http:&#x2F;&#x2F;dbpedia.org&#x2F;property&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix skos: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2004&#x2F;02&#x2F;skos&#x2F;core#&gt; .</span></pre></td></tr></table></figure>
查找流行命名空间的工具：<a href="http://prefix.cc/">prefix.cc</a></p>
<h4>RDF的表达能力</h4>
<p>RDF的表达能力有限，无法区分类和对象，也无法定义和描述类的关系/属性。RDFS和OWL这两种技术或者说模式语言/本体语言(schema/ontology language)解决了RDF表达能力有限的困境。</p>
<h4>URI(Universal Resource Identifier)——统一资源标识符</h4>
<p>The fundamental value and differentiating capability of the Semantic Web is the ability to connect things.<br>
The URI is what makes this possible.</p>
<h4>Named Graphs</h4>
<p>When referring to a triple in a named graph, you would often use 4-tuple notation instead of 3-tuple notation. The 4-tuple is of the form:<br>
==(named graph, subject, predicate, object)==<br>
Named Graphs也由URIs标记。</p>
<h4>RDF Vocabulary</h4>
<p><a href="http://dublincore.org/">DC (Dublin Core)</a>用于描述标题和创建者等资源元数据。<br>
<a href="http://www.foaf-project.org/">FOAF (Friend of a Friend)</a>将人与人或人与组织之间联系起来的词汇。<br>
<a href="http://www.heppnetz.de/projects/goodrelations/">GoodRelations</a>电子商务词汇。</p>
<h3>二、RDF vs. XML</h3>
<p>XML是一种序列化格式（重点在于representation），RDF是一种数据模型（重点在于meaning）。</p>
<h3>三、RDF的“衣服” —— RDFS/OWL</h3>
<p>RDFS/OWL本质上是一些预定义词汇(vocabulary)构成的集合，用于对RDF进行类似的类定义及其属性的定义。<br>
==建议：通常用小写开头的单词或词组来表示属性，大写开头的表示类。数据属性(data property，实体和literal字面量的关系)通常由名词组成，而对象数据(object property，实体和实体之间的关系)通常由动词(has，is之类的)加名词组成。剩下的部分符合驼峰命名法。==</p>
<h4>轻量级的模式语言——RDFS</h4>
<p>RDFS(Resource Description Framework Schema)，是最基础的模式语言。
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@prefix rdfs: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;01&#x2F;rdf-schema#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix rdf: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix : &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">### 这里我们用词汇rdfs:Class定义了“人”和“地点”这两个类。</span></pre></td></tr><tr><td class="code"><pre><span class="line">:Person rdf:type rdfs:Class.</span></pre></td></tr><tr><td class="code"><pre><span class="line">:Place rdf:type rdfs:Class.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">### rdfs当中不区分数据属性和对象属性，词汇rdf:Property定义了属性，即RDF的“边”。</span></pre></td></tr><tr><td class="code"><pre><span class="line">:chineseName rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">:career rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:fullName rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:birthDate rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:date .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">:height rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:int .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:weight rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:int .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:nationality rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:hasBirthPlace rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range :Place .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:address rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Place;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:coordinate rdf:type rdf:Property;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Place;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr></table></figure></p>
<ol>
<li>rdfs:Class. 用于定义类。</li>
<li>rdfs:domain. 用于表示该属性属于哪个类别。</li>
<li>rdfs:range. 用于描述该属性的取值类型。</li>
<li>rdfs:subClassOf. 用于描述该类的父类。</li>
<li>rdfs:subProperty. 用于描述该属性的父属性。</li>
</ol>
<p>==RDFS本质上就是RDF词汇的一个扩展。== 更多参考见<a href="https://www.w3.org/TR/rdf-schema/">RDF Schema 1.1</a></p>
<h4>RDFS的扩展——OWL</h4>
<p>OWL(Web Ontology Language)，语义网技术栈的核心之一。OWL有两个主要的功能:</p>
<ol>
<li>提供快速、灵活的数据建模能力。</li>
<li>高效的自动推理。<br>
==PS. 知识图谱的推理主要分为两类：基于本体的推理和基于规则的推理。==
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@prefix rdfs: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;01&#x2F;rdf-schema#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix rdf: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;02&#x2F;22-rdf-syntax-ns#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix : &lt;http:&#x2F;&#x2F;www.kg.com&#x2F;ontology&#x2F;&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line">@prefix owl: &lt;http:&#x2F;&#x2F;www.w3.org&#x2F;2002&#x2F;07&#x2F;owl#&gt; .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">### 这里我们用词汇owl:Class定义了“人”和“地点”这两个类。</span></pre></td></tr><tr><td class="code"><pre><span class="line">:Person rdf:type owl:Class.</span></pre></td></tr><tr><td class="code"><pre><span class="line">:Place rdf:type owl:Class.</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">### owl区分数据属性和对象属性。词汇owl:DatatypeProperty定义了数据属性，owl:ObjectProperty定义了对象属性。</span></pre></td></tr><tr><td class="code"><pre><span class="line">:chineseName rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">:career rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:fullName rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:birthDate rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:date .</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">:height rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:int .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:weight rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:int .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:nationality rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:hasBirthPlace rdf:type owl:ObjectProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Person;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range :Place .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:address rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Place;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr><tr><td class="code"><pre><span class="line">        </span></pre></td></tr><tr><td class="code"><pre><span class="line">:coordinate rdf:type owl:DatatypeProperty;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:domain :Place;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rdfs:range xsd:string .</span></pre></td></tr></table></figure>
==常用属性：==</li>
</ol>
<ul>
<li>描述属性特征的词汇：
<ol>
<li>owl:TransitiveProperty. 表示该属性具有传递性质。例如，我们定义“位于”是具有传递性的属性，若A位于B，B位于C，那么A肯定位于C。</li>
<li>owl:SymmetricProperty. 表示该属性具有对称性。例如，我们定义“认识”是具有对称性的属性，若A认识B，那么B肯定认识A。</li>
<li>owl:FunctionalProperty. 表示该属性取值的唯一性。 例如，我们定义“母亲”是具有唯一性的属性，若A的母亲是B，在其他地方我们得知A的母亲是C，那么B和C指的是同一个人。</li>
<li>owl:inverseOf. 定义某个属性的相反关系。例如，定义“父母”的相反关系是“子女”，若A是B的父母，那么B肯定是A的子女。</li>
</ol>
</li>
<li>本体映射词汇：
<ol>
<li>owl:equivalentClass. 表示某个类和另一个类是相同的。</li>
<li>owl:equivalentProperty. 表示某个属性和另一个属性是相同的。</li>
<li>owl:sameAs. 表示两个实体是同一个实体。<br>
==本体映射主要用在融合多个独立的Ontology（Schema）。== 更多参考见<a href="https://www.w3.org/TR/2004/REC-owl-features-20040210/">OWL Web Ontology Language
Overview</a>及<a href="https://www.w3.org/TR/owl2-overview/">OWL 2 Web Ontology Language
Document Overview (Second Edition)</a></li>
</ol>
</li>
</ul>
<h4>XSD部分内置数据类型</h4>
<p>更多详见：<a href="https://www.w3.org/TR/xmlschema-2/#built-in-primitive-datatypes">XML Schema Part 2: Datatypes Second Edition</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">DataType</th>
<th style="text-align:center">Description</th>
<th style="text-align:center">Example Representation</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">xsd:string</td>
<td style="text-align:center">A character string</td>
<td style="text-align:center">Hello World</td>
</tr>
<tr>
<td style="text-align:center">xsd:boolean</td>
<td style="text-align:center">A true/false value</td>
<td style="text-align:center">True</td>
</tr>
<tr>
<td style="text-align:center">xsd:decimal</td>
<td style="text-align:center">Those real numbers which can be represented decimal format</td>
<td style="text-align:center">42.1</td>
</tr>
<tr>
<td style="text-align:center">xsd:float</td>
<td style="text-align:center">Patterned after single-precision IEEE 32-bit floating point</td>
<td style="text-align:center">6.0235e-23</td>
</tr>
<tr>
<td style="text-align:center">xsd:double</td>
<td style="text-align:center">Patterned after IEEE 64-bit floating point</td>
<td style="text-align:center">6.0235e-23</td>
</tr>
<tr>
<td style="text-align:center">xsd:duration</td>
<td style="text-align:center">A duration of time. For example, a period of 5 years, 2 months, and 10 days</td>
<td style="text-align:center">P5Y2M10D</td>
</tr>
<tr>
<td style="text-align:center">xsd:dateTime</td>
<td style="text-align:center">A date and time together</td>
<td style="text-align:center">2002-05-30T09:30:10.5</td>
</tr>
<tr>
<td style="text-align:center">xsd:time</td>
<td style="text-align:center">An instant of time that recurs every day</td>
<td style="text-align:center">13:04:00</td>
</tr>
<tr>
<td style="text-align:center">xsd:date</td>
<td style="text-align:center">Intervals of exactly one day in length</td>
<td style="text-align:center">1889-09-24</td>
</tr>
<tr>
<td style="text-align:center">xsd:gYearMonth</td>
<td style="text-align:center">A specific Gregorian month in a specific Gregorian year</td>
<td style="text-align:center">1999-05</td>
</tr>
<tr>
<td style="text-align:center">xsd:gYear</td>
<td style="text-align:center">A Gregorian calendar year</td>
<td style="text-align:center">1999</td>
</tr>
<tr>
<td style="text-align:center">xsd:gMonthDay</td>
<td style="text-align:center">A Gregorian date that recurs, specifically a day of the year such as the third of May</td>
<td style="text-align:center">–05-03</td>
</tr>
<tr>
<td style="text-align:center">xsd:gDay</td>
<td style="text-align:center">A Gregorian day that recurs, specifically a day of the month such as the 27th of the month</td>
<td style="text-align:center">–27</td>
</tr>
<tr>
<td style="text-align:center">xsd:gMonth</td>
<td style="text-align:center">A Gregorian month that recurs every year. For example, June</td>
<td style="text-align:center">–06–</td>
</tr>
<tr>
<td style="text-align:center">xsd:hexBinary</td>
<td style="text-align:center">Arbitrary hex-encoded binary data</td>
<td style="text-align:center">0047dedbef</td>
</tr>
<tr>
<td style="text-align:center">xsd:base64Binary</td>
<td style="text-align:center">Arbitrary Base64-encoded binary data</td>
<td style="text-align:center">VGhpcyBpcyBzb21lIHRleHQh</td>
</tr>
<tr>
<td style="text-align:center">xsd:anyURI</td>
<td style="text-align:center">A Uniform Resource Identifier Reference (URI)</td>
<td style="text-align:center">http://www.cambridgesemantics.com</td>
</tr>
</tbody>
</table>
<h2>Reference</h2>
<p><a href="https://zhuanlan.zhihu.com/p/32122644">知识图谱基础之RDF，RDFS与OWL</a><br>
<a href="https://www.cambridgesemantics.com/blog/semantic-university/learn-rdf/">Learn RDF</a></p>
]]></content>
  </entry>
  <entry>
    <title>评价指标</title>
    <url>/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h1>召回率（Recall）</h1>
<p>原始样本中的正类有多少被正确预测了。{FP：正类预测为负类}<br>
$ R = \frac{TP}{TP+FN} $</p>
<h1>精确率（precision）</h1>
<p>预测为正的样本中有多少是真正为正的正样本。{TP：正类预测为正类，FP：负类预测为正类}<br>
$ P = \frac{TP}{TP+FP} $</p>
<h1>F1值（F1-score）</h1>
<p>精确率和召回率的调和平均数，最大为1，最小为0；<br>
$ F1 = 2 \cdot \frac{P \cdot R}{P+R} $</p>
]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>统计</tag>
        <tag>深度学习</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
